version: 0.2

env:
  variables:
    NODE_ENV: "production"
    DOCKER_BUILDKIT: "1"

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - echo Installing backend dependencies...
      - echo "Working directory:"
      - pwd
      - echo "Directory structure:"
      - ls -la
      - cd ops/packages/api
      - npm ci --include=dev
      - echo "Checking installed packages:"
      - npm list --depth=0

  pre_build:
    commands:
      - echo Starting backend API build...
      - echo "Working directory at start:"
      - pwd
      - echo "Full directory tree:"
      - find . -type d -name "*" | head -20
      - echo "Looking for 'api' directories anywhere:"
      - find . -name "api" -type d 2>/dev/null || echo "No api directory found"
      - echo "Looking for 'packages' directories:"
      - find . -name "packages" -type d 2>/dev/null || echo "No packages directory found"
      - echo "Directory structure at root:"
      - ls -la
      - echo "Checking if ops directory exists:"
      - ls -la ops/ || echo "ops directory not found"
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO
      - echo Logging in to Amazon ECR Public Gallery...
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      - echo Running code quality checks...
      - |
        if [ -d "ops/packages/api" ]; then
          echo "Found ops/packages/api directory"
          cd ops/packages/api
          echo "Now in ops/packages/api, running tests..."
          npm run lint || echo "Lint check skipped - no linter configured"
          echo "Running unit tests..."
          npm test -- --coverage --watchAll=false || echo "Tests skipped - no tests configured"
          echo "Preparing Docker context..."
          cd $CODEBUILD_SRC_DIR
        else
          echo "WARNING: ops/packages/api directory not found!"
          echo "Skipping tests and proceeding with Docker build..."
          echo "Full directory structure:"
          find . -maxdepth 3 -type d
        fi
      - echo "Back to root directory:"
      - cd $CODEBUILD_SRC_DIR
      - pwd
      - echo "Current directory structure:"
      - ls -la

  build:
    commands:
      - echo Building and pushing Docker image...
      - echo "Build started on $(date)"
      - echo "Current working directory:"
      - pwd
      - echo "Navigating back to repository root..."
      - cd $CODEBUILD_SRC_DIR
      - pwd
      - echo "Repository root directory structure:"
      - ls -la
      - echo "Verifying Docker context and Dockerfile location:"
      - echo "Looking for Dockerfile:"
      - find . -name "Dockerfile" -type f
      - echo "Checking ops/packages/Dockerfile:"
      - ls -la ops/packages/Dockerfile || echo "Dockerfile not found at ops/packages/Dockerfile"
      - echo "Contents of ops/packages directory:"
      - ls -la ops/packages/ || echo "ops/packages directory not found"
      - echo "Changing to ops/packages directory for Docker build context:"
      - cd ops/packages
      - pwd
      - echo "Current directory structure for Docker build context:"
      - ls -la
      - echo "Verifying required files for Docker build:"
      - ls -la package*.json || echo "package.json not found"
      - ls -la Dockerfile || echo "Dockerfile not found" 
      - ls -la api/ || echo "api directory not found"
      - ls -la web/ || echo "web directory not found"
      - echo "Building Docker images with correct context..."
      - docker build -f Dockerfile -t $ECR_REPO:$CODEBUILD_RESOLVED_SOURCE_VERSION .
      - docker build -f Dockerfile -t $ECR_REPO:latest .
      - echo Running security scan on Docker image...
      - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 0 --no-progress --format json --output trivy-results.json $ECR_REPO:$CODEBUILD_RESOLVED_SOURCE_VERSION || true
      - echo Pushing Docker images to ECR...
      - docker push $ECR_REPO:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - docker push $ECR_REPO:latest
      - echo Updating ECS service with new image...
      - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
      - echo Waiting for service to stabilize...
      - echo "Checking current service status..."
      - aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].{Status:status,RunningCount:runningCount,PendingCount:pendingCount,DesiredCount:desiredCount}' || echo "Could not describe service"
      - echo "Waiting up to 5 minutes for service stabilization..."
      - timeout 300 aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE || echo "Service stabilization timeout - continuing with deployment verification"
      - echo "Final service status:"
      - aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].{Status:status,RunningCount:runningCount,PendingCount:pendingCount}' || echo "Could not describe final service status"

  post_build:
    commands:
      - echo "Backend API deployment completed on $(date)"
      - echo Verifying deployment health...
      - sleep 30
      - curl -f $APP_HEALTH_URL/health || echo "Health check failed, but continuing..."
      - echo Getting service endpoint...
      - aws elbv2 describe-load-balancers --names $ALB_NAME --query 'LoadBalancers[0].DNSName' || echo "ALB not found"
      - echo Generating deployment manifest...
      - echo "Current working directory before manifest generation:"
      - pwd
      - echo "Navigating to repository root for artifact generation:"
      - cd $CODEBUILD_SRC_DIR
      - pwd
      - printf '[{"name":"api","imageUri":"%s"}]' $ECR_REPO:$CODEBUILD_RESOLVED_SOURCE_VERSION > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - ops/packages/api/coverage/**/*
    - trivy-results.json
  name: backend-artifacts

reports:
  jest-reports:
    files:
      - ops/packages/api/coverage/lcov.info
    file-format: 'CLOVERXML'
  security-scan:
    files:
      - trivy-results.json
    file-format: 'JSON'

cache:
  paths:
    - ops/packages/api/node_modules/**/*
    - /root/.npm/**/*