version: 0.2

env:
  variables:
    NODE_ENV: "production"
    DOCKER_BUILDKIT: "1"

phases:
  install:
    runtime-versions:
      nodejs: 18
      docker: 20
    commands:
      - echo Installing dependencies...
      - cd web_app
      - npm ci

  pre_build:
    commands:
      - echo Starting web application build...
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO
      - echo Running code quality checks...
      - npm run lint
      - echo Running unit tests...
      - npm test -- --coverage --watchAll=false
      - echo Building frontend with Vite...
      - npm run build
      - echo Verifying build artifacts...
      - ls -la frontend/dist/

  build:
    commands:
      - echo Building and pushing Docker image...
      - echo Build started on `date`
      - docker build -t $ECR_REPO:$CODEBUILD_RESOLVED_SOURCE_VERSION .
      - docker build -t $ECR_REPO:latest .
      - echo Running security scan on Docker image...
      - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 0 --no-progress --format json --output trivy-results.json $ECR_REPO:$CODEBUILD_RESOLVED_SOURCE_VERSION || true
      - echo Pushing Docker images to ECR...
      - docker push $ECR_REPO:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - docker push $ECR_REPO:latest
      - echo Updating ECS service with new image...
      - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
      - echo Waiting for service to stabilize...
      - aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
      - echo Syncing frontend assets to S3...
      - aws s3 sync ./frontend/dist s3://$FRONTEND_BUCKET --delete --cache-control "public, max-age=31536000"
      - echo Creating CloudFront invalidation...
      - INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_ID --paths "/*" --query 'Invalidation.Id' --output text)
      - echo "CloudFront invalidation created with ID: $INVALIDATION_ID"

  post_build:
    commands:
      - echo Web application deployment completed on `date`
      - echo Verifying deployment health...
      - sleep 30
      - curl -f $APP_HEALTH_URL/health || echo "Health check failed, but continuing..."
      - echo Getting service endpoint...
      - aws elbv2 describe-load-balancers --names $ALB_NAME --query 'LoadBalancers[0].DNSName' || echo "ALB not found"
      - echo Generating deployment manifest...
      - printf '[{"name":"ecommerce-app","imageUri":"%s"}]' $ECR_REPO:$CODEBUILD_RESOLVED_SOURCE_VERSION > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - web_app/imagedefinitions.json
    - web_app/frontend/dist/**/*
    - web_app/coverage/**/*
    - web_app/trivy-results.json
  name: webapp-artifacts

reports:
  jest-reports:
    files:
      - web_app/coverage/lcov.info
    file-format: 'CLOVERXML'
  security-scan:
    files:
      - web_app/trivy-results.json
    file-format: 'JSON'

cache:
  paths:
    - web_app/node_modules/**/*
    - /root/.npm/**/*